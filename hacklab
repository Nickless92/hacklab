#!/bin/bash

#set -eEuo pipefail                      # make script fail on any errors/return!=0
[ $# -ge 1 ] && [ $1 = "v" ] && set -x  # VERY verbose, prints every step before its execution

# color variables
green='\e[32m'
cyan='\e[96m'
red='\e[31m'
clearcolor='\e[0m'

# color functions
color_green() {
    echo -ne $green$1$clearcolor
}
color_cyan() {
    echo -ne $cyan$1$clearcolor
}
color_red() {
    echo -ne $red$1$clearcolor
}

function welcome_screen() {                                                     # start sequence: print hacker graphic, wait, then proceed to enter_username
    clear
    sleep 1s
    cat ./ressources/ascii/welcome.txt
    sleep 2s
    clear
    next_stage="enter_username"
}

function enter_username() {                                                     # read username from stdin, proceed with 'enter', exit with 'x' 
    echo -ne "\nPlease enter the hacker-name you want to be addressed with, enter x to exit: "
    read name
    if [[ $name = "x" ]]; then exit 0; else next_stage="introduction"; fi 
}

function introduction() {
    clear
    cat <<-____HERE
Hello $(color_green $name). Welcome to hacklab!

This is a game in which you can start learning how to manipulate
networks and defend yourself from cyber attacks.
To start with, we will need to know how much knowledge you already possess.

____HERE
    next_stage="enter_experience"
}

function enter_experience() {
    print_menu_options experience

    echo -ne "Please choose your experience level: "
    read -n 1 menuinput
    case $menuinput in
	1) echo -e "\nyou chose pupil.\n";              next_stage="pupils" ;;
	2) echo -e "\nyou chose student.\n";            next_stage="student_modules" ;;
	3) echo -e "\nyou chose expert.\n";             next_stage="experts" ;;
	x) echo -e "\nyou chose exit";                  exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n"   ;;
    esac
}

function pupils() {
    print_menu_options
    
	echo -ne "Please choose a level: "
    read -n 1 menuinput
    case $menuinput in
        1) echo -e "\nyou chose level 1. Sorry, this is empty..."   ;;
        2) echo -e "\nyou chose level 2. Sorry, this is empty..."   ;;
        3) echo -e "\nyou chose level 3. Sorry, this is empty..."   ;;
        4) echo -e "\nyou chose level 4. Sorry, this is empty..."   ;;
        5) echo -e "\nyou chose level 5. Sorry, this is empty..."   ;;
        b) echo -e "\nyou chose back\n";                            next_stage="enter_experience" ;;            
        x) echo -e "\nyou chose exit";                              exit 0 ;;
        *) echo -e "\n$(color_red 'Wrong option.')\n"               ;;
    esac
}

function student_modules() {
    print_menu_options
    
    echo -ne "Please choose a module: "
    read -n 1 menuinput
    case $menuinput in
    1) echo -e "\nyou chose Network Technologies.\n";   next_stage="networks" ;;
    2) echo -e "\nyou chose Network Security.\n";       next_stage="netsec" ;;
    b) echo -e "\nyou chose back\n";                    next_stage="enter_experience" ;;
    x) echo -e "\nyou chose exit";                      exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n"       ;;
    esac
}


function networks() {
    print_menu_options

	echo -ne "\nPlease choose a level: "
    read -n 1 menuinput
    case $menuinput in
<<<<<<< HEAD
	1)  . ./levels/01/tmux_create_session.sh;                                   # splits tmux in different windows
        . upload_score_to_database $module 1        ;;
	2)  ./levels/02/tmux_create_session.sh;
        . upload_score_to_database $module 2        ;;
	3) echo -e "\nyou chose level 3"                ;;
	4) echo -e "\nyou chose level 4"                ;;
	5) echo -e "\nyou chose level 5"                ;;
	b) echo -e "\nyou chose back\n";                next_stage="student_modules" ;;
	x) echo -e "\nyou chose exit";                  exit 0 ;;
	*) echo -e "\n$(color_red 'Wrong option.')\n"   ;;
=======
<<<<<<< HEAD
	1)  ./levels/01-test/tmux_create_session.sh;                                    # splits tmux in different windows
=======
    1)  ./levels/01-test/tmux_create_session.sh;                                    # splits tmux in different windows   
        . ./scripts/upload $name 1;
>>>>>>> added database
        return 5 ;;                                                                 # return 5 means that the function networks_levels is going to run
	2)  ./levels/level2_netzwerk_arp_poisoning/tmux_create_session.sh;
        return 5 ;;
#	2) echo -e "you chose level 2. starting..." ; sudo tmux new-session -s lvl02 -d 'lxc shell lvl02-c02'\; split-window -v -d 'lxc shell lvl02-c01' \; split-window -h -d 'lxc shell lvl02-c03' \; attach ; clear ; ../levels/level2_netzwerk_arp_poisoning/Auswertung.sh ; return 5 ;;
	3) echo -e "\nyou chose level 3" ; return 5 ;;
	4) echo -e "\nyou chose level 4" ; return 5 ;; 
	5) echo -e "\nyou chose level 5" ; return 5 ;;
	b) echo -e "\nyou chose back\n"; return 4 ;;                                    # return 4 means that the function module_menu is going to run
	x) echo -e "\nyou chose exit"; exit 0 ;;
	*) echo -e $red"\nWrong option.\n"$clear; return 5;;                            # return 5 means that the function networks_levels is going to run
>>>>>>> added database
    esac
}

function netsec() {
    print_menu_options

	echo -ne "Please choose a level: "
    read -n 1 menuinput
    case $menuinput in
    1) echo -e "\nyou chose level 1. this is empty."    ;;
	2) echo -e "\nyou chose level 2. this is empty."    ;;
	3) echo -e "\nyou chose level 3. this is empty."    ;;
	4) echo -e "\nyou chose level 4. this is empty."    ;; 
	5) echo -e "\nyou chose level 5. this is empty."    ;;
    b) echo -e "\nyou chose back\n";                    next_stage="student_modules" ;;
    x) echo -e "\nyou chose exit";                      exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n"       ;;
    esac
}

function experts() {
    print_menu_options
    
    echo -ne "Please choose a level: "
    read -n 1 menuinput
    case $menuinput in
    1) echo -e "\nyou chose level 1. this is empty."    ;;
	2) echo -e "\nyou chose level 2. this is empty."    ;;
	3) echo -e "\nyou chose level 3. this is empty."    ;;
	4) echo -e "\nyou chose level 4. this is empty."    ;; 
	5) echo -e "\nyou chose level 5. this is empty."    ;;
    b) echo -e "\nyou chose back\n";                    next_stage="enter_experience" ;;            
    x) echo -e "\nyou chose exit";                      exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n"       ;;
    esac
}

<<<<<<< HEAD
function print_menu_options() {
    [ $# -eq 0 ] && tag="$next_stage"
    [ $# -eq 1 ] && tag="$1"
    . get_lines_with_tag "$tag" ./ressources/menu_options_with_description.txt
    i=1
    for (( line=$startline ; line<=$endline ; line++ )); do
        text=$(awk 'NR=='$line'{ print}' $file)                                 # store $line from $file in $text
        echo -e "$(color_cyan "$i"')')" $text
        ((i++))
=======
back_exit()
{
	echo -ne "$(ColorRed 'b)ack')  -  Back to previous menu\n"
	echo -ne "$(ColorRed 'e(x)it')\n" 
}

level()
{
	i=1
	while [ $i -ne $1 ]                                                             # loop from 1 till the given paramter $1 is the parameter
	  do
	    echo -ne "$(Colorlight_cyan " $i"')')" "   -  Level " $i "\n"
	    i=$(($i+1))
	done 
}

main_menu () 
{
    createDatabase
    enter_name
    clear
    welcome="Welcome to hacklab"
    game=\
"This is a game in which you can start learning how to manipulate networks and defend yourself from cyber attacks.
To start, we will need to know how much knowledge you already posess.\nPlease choose one of the following options:\n"
    echo -e "$welcome $(ColorGreen $name)!\n$game"
    returnValue=2

    while : ; do
        case $returnValue in
            1) enter_name;;                                                         # is going to run if a function returns 1
            2) choose_stage;;                                                       # is going to run if a function returns 2
            3) pupil_levels;;                                                       # is going to run if a function returns 3 
            4) module_menu;;                                                        # is going to run if a function returns 4
            5) networks_levels;;                                                    # is going to run if a function returns 5
            6) netsec_levels;;                                                      # is going to run if a function returns 6
            7) expert_levels;;                                                      # is going to run if a function returns 7
            *) exit 0;;
        esac
        returnValue=$?
        [[ $returnValue -ne 0 ]] || break
>>>>>>> added database
    done
    [ $next_stage != "enter_experience" ] && echo -e "$(color_red 'b)ack')"
	echo -e "$(color_red 'e(x)it')" 
}

# first, cd into hacklabdir (= path/to/hacklab)
hacklabdir=$(dirname $(readlink -f "$0"))
cd $hacklabdir

# second, add relevant paths to environment
PATH=$(echo $PATH:$hacklabdir:$hacklabdir/scripts:$hacklabdir/backend:$hacklabdir/database)

# third, load config parameters
source ./.CONF


# check if required tools are available
verify_tools.sh

# FIXME: print message that some heavy-lifting is being done, and ask for patience
# build iso for hacklab containers                                              # only builds a new iso if non-existent or age>24h
alpine_create_iso.sh                                                            # optional call with 'force' parameter

# initialize lxc network and profile
network_create.sh                                                               # create a hacklab bridge
profile_create.sh                                                               # create a hacklab profile using hacklab bridge

# main menu
next_stage=welcome_screen
while : ; do $next_stage; done
exit 0
