#!/bin/bash

#set -eEuo pipefail                      # make script fail on any errors/return!=0
[ $# -ge 1 ] && [ $1 = "v" ] && set -x  # VERY verbose, prints every step before its execution

# color variables
green='\e[32m'
cyan='\e[96m' 
red='\e[31m'
clearcolor='\e[0m'

# color functions
color_green() {
    echo -ne $green$1$clearcolor
}
color_cyan() {
    echo -ne $cyan$1$clearcolor
}
color_red() {
    echo -ne $red$1$clearcolor
}

function pushDatabaseToServer()
{
    if [ -f localDatabase.txt.gpg ]; then
        timeStamp=$(date +%s)
        scp ./localDatabase.txt.gpg hacklab@10.215.33.91:/home/hacklab/uploadedFiles/databaseHacklab-${timeStamp}-${RANDOM}.txt.gpg 
    else
        return
    fi
}

function createDatabase()
{
    if [ -f localDatabase.txt.asc ]; then
        timestamp=$(date +%s)
        scp ./localDatabase.txt.asc hacklab@10.215.33.91:/home/hacklab/uploadedFiles/databaseHacklab-${timestamp}-${RANDOM}.txt.gpg
    else
        echo -e "Username;email;submission data;level;points\n" >> database.txt
    fi
}

function welcome_screen() {                                                     # start sequence: print hacker graphic, wait, then proceed to enter_username
    clear
    sleep 1s
    cat ./ressources/ascii/welcome.txt
    sleep 2s
    clear
    next_stage="enter_username"
}

function enter_username() {                                                     # read username from stdin, proceed with 'enter', exit with 'x' 
    echo -ne "\nPlease enter the hacker-name you want to be addressed with, enter x to exit: "
    read name
    if [[ $name = "x" ]]; then exit 0; else next_stage="introduction"; fi 
}

function introduction() {
    clear
    cat <<-____HERE
Hello $(color_green $name). Welcome to hacklab!

This is a game in which you can start learning how to manipulate
networks and defend yourself from cyber attacks.
To start with, we will need to know how much knowledge you already possess.

____HERE
    next_stage="enter_experience"
}

function enter_experience () {
    print_menu_options experience

    echo -ne "Please choose your experience level: "
    read -n 1 menuinput
    case $menuinput in
	1) echo -e "\nyou chose pupil.\n";              next_stage="pupil_levels" ;;
	2) echo -e "\nyou chose student.\n";            next_stage="student_modules" ;;
	3) echo -e "\nyou chose expert.\n";             next_stage="expert_levels" ;;
	x) echo -e "\nyou chose exit"; exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n";  next_stage="enter_experience" ;;
    esac
}

function pupil_levels () {
    print_menu_options pupils
    
	echo -ne "Please choose a level: "
    read -n 1 menuinput
    case $menuinput in
        1) echo -e "\nyou chose level 1. Sorry, this is empty...";  next_stage="pupil_levels" ;;
        2) echo -e "\nyou chose level 2. Sorry, this is empty...";  next_stage="pupil_levels" ;;
        3) echo -e "\nyou chose level 3. Sorry, this is empty...";  next_stage="pupil_levels" ;;
        4) echo -e "\nyou chose level 4. Sorry, this is empty...";  next_stage="pupil_levels" ;;
        5) echo -e "\nyou chose level 5. Sorry, this is empty...";  next_stage="pupil_levels" ;;
        b) echo -e "\nyou chose back\n";                            next_stage="enter_experience" ;;            
        x) echo -e "\nyou chose exit"; exit 0 ;;
        *) echo -e "\n$(color_red 'Wrong option.')\n";              next_stage="pupil_levels" ;;
    esac
}

function student_modules () {
    print_menu_options modules
    
    echo -ne "Please choose a module: "
    read -n 1 menuinput
    case $menuinput in
    1) echo -e "\nyou chose Network Technologies.\n";   next_stage="network_levels" ;;
    2) echo -e "\nyou chose Network Security.\n";       next_stage="netsec_levels" ;;
    b) echo -e "\nyou chose back\n";                    next_stage="enter_experience" ;;
    x) echo -e "\nyou chose exit"; exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n";      next_stage="student_modules" ;;
    esac
}


function network_levels () {
    print_menu_options networks
    
	echo -ne "\nPlease choose a level: "
    read -n 1 menuinput
    case $menuinput in
	1)  . ./levels/01/tmux_create_session.sh;                                  # splits tmux in different windows
        . upload $name 1;                           next_stage="network_levels" ;;
	2)  ./levels/02/tmux_create_session.sh;         next_stage="network_levels" ;;
	3) echo -e "\nyou chose level 3" ;              next_stage="network_levels" ;;
	4) echo -e "\nyou chose level 4" ;              next_stage="network_levels" ;;
	5) echo -e "\nyou chose level 5" ;              next_stage="network_levels" ;;
	b) echo -e "\nyou chose back\n";                next_stage="student_modules" ;;
	x) echo -e "\nyou chose exit"; exit 0 ;;
	*) echo -e "\n$(color_red 'Wrong option.')\n";  next_stage="network_levels" ;;
    esac
}

function netsec_levels () {
    print_menu_options netsec
            
	echo -ne "Please choose a level: "
    read -n 1 menuinput
    case $menuinput in
    1) echo -e "\nyou chose level 1. this is empty." ;  next_stage="netsec_levels" ;;
	2) echo -e "\nyou chose level 2. this is empty." ;  next_stage="netsec_levels" ;;
	3) echo -e "\nyou chose level 3. this is empty." ;  next_stage="netsec_levels" ;;
	4) echo -e "\nyou chose level 4. this is empty." ;  next_stage="netsec_levels" ;; 
	5) echo -e "\nyou chose level 5. this is empty." ;  next_stage="netsec_levels" ;;
    b) echo -e "\nyou chose back\n";                    next_stage="student_modules" ;;
    x) echo -e "\nyou chose exit" ; exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n";      next_stage="netsec_levels" ;;
    esac
}

function expert_levels() {
    print_menu_options experts
    
    echo -ne "Please choose a level: "
    read -n 1 menuinput
    case $menuinput in
    1) echo -e "\nyou chose level 1. this is empty." ;  next_stage="expert_levels" ;;
	2) echo -e "\nyou chose level 2. this is empty." ;  next_stage="expert_levels" ;;
	3) echo -e "\nyou chose level 3. this is empty." ;  next_stage="expert_levels" ;;
	4) echo -e "\nyou chose level 4. this is empty." ;  next_stage="expert_levels" ;; 
	5) echo -e "\nyou chose level 5. this is empty." ;  next_stage="expert_levels" ;;
    b) echo -e "\nyou chose back\n";                    next_stage="enter_experience" ;;            
    x) echo -e "\nyou chose exit" ; exit 0 ;;
    *) echo -e "\n$(color_red 'Wrong option.')\n";      next_stage="expert_levels" ;;
    esac    
}

function print_menu_options() {
    . get_lines_with_tag $1 ./ressources/menu_options_with_description.txt
    i=1
    for (( line=$startline ; line<=$endline ; line++ )); do
        text=$(awk 'NR=='$line'{ print}' $file)       # store $line from $file in $text
        echo -e "$(color_cyan "$i"')')" $text
        ((i++))
    done
    [ $next_stage != "enter_experience" ] && echo -e "$(color_red 'b)ack')"
	echo -e "$(color_red 'e(x)it')" 
}

# cd into hacklabdir (= path/to/hacklab)
hacklabdir=$(dirname $(readlink -f "$0"))
cd $hacklabdir

# add relevant paths to environment
PATH=$(echo $PATH:$hacklabdir:$hacklabdir/scripts:$hacklabdir/backend)

# check if required tools are available
verify_tools.sh

# main menu
next_stage=welcome_screen
while : ; do $next_stage; done
exit 0
